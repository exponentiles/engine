<?php

namespace Exponentiles\Engine\Tests;

use Exponentiles\Engine\Engine;
use Exponentiles\Engine\Grid;
use Exponentiles\Engine\Tile;
use Illuminate\Support\Str;
use PHPUnit\Framework\TestCase;

class EngineTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Str::createUuidsUsing(
            fn () => 'tile-id'
        );
    }

    public function test_it_has_a_grid()
    {
        $engine = new Engine();

        $this->assertInstanceOf(
            Grid::class,
            $engine->grid,
        );
    }

    public function test_it_can_customize_grid_size()
    {
        $engine = new Engine(
            size: 2
        );

        $this->assertSame(2, $engine->grid->size);
    }

    public function test_it_can_add_random_tile()
    {
        $engine = new Engine();

        $engine->addTile();

        $this->assertCount(
            ($engine->grid->size * $engine->grid->size) - 1,
            $engine->grid->getAvailableCells()
        );
    }

    public function test_it_adds_two_tiles_on_start()
    {
        $engine = new Engine();

        $engine->start();

        $this->assertCount(
            ($engine->grid->size * $engine->grid->size) - 2,
            $engine->grid->getAvailableCells()
        );
    }

    public function test_it_can_export_grid_to_array()
    {
        $engine = new Engine(size:2);

        $engine->grid->tiles = [
            [$tileA = new Tile(0, 0, 1), $tileB = new Tile(0, 1, 2)],
            [$tileC = new Tile(1, 0, 4), $tileD = new Tile(1, 1, 5)],
        ];

        $this->assertSame(
            [
                $tileA->serialize(), $tileC->serialize(),
                $tileB->serialize(), $tileD->serialize(),
            ],
            $engine->export()
        );
    }

    public function test_it_can_import_grid_from_array()
    {
        $engine = new Engine(size: 2);

        $engine->import([
            ['id' => 'tile-id', 'x' => 0, 'y' => 0, 'value' => 1],
            ['id' => 'tile-id', 'x' => 1, 'y' => 0, 'value' => 2],
            ['id' => 'tile-id', 'x' => 0, 'y' => 1, 'value' => 3],
            ['id' => 'tile-id', 'x' => 1, 'y' => 1, 'value' => 4],
        ]);

        $this->assertEquals(
            [
                [new Tile(0, 0, 1), new Tile(0, 1, 3)],
                [new Tile(1, 0, 2), new Tile(1, 1, 4)],
            ],
            $engine->grid->tiles
        );
    }
}

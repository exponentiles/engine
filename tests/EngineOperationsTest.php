<?php

namespace Exponentiles\Engine\Tests;

use Exponentiles\Engine\Engine;
use Illuminate\Support\Arr;
use Illuminate\Support\Str;
use PHPUnit\Framework\TestCase;

class EngineOperationsTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Str::createUuidsUsing(
            fn () => 'tile-id'
        );
    }

    public function test_it_can_steer_north()
    {
        $engine = new Engine();

        $engine->import(
            [
                ['id' => 'tile-id', 'x' => 0, 'y' => 0, 'value' => 0],
                ['id' => 'tile-id', 'x' => 1, 'y' => 0, 'value' => 0],
                ['id' => 'tile-id', 'x' => 2, 'y' => 0, 'value' => 0],
                ['id' => 'tile-id', 'x' => 3, 'y' => 0, 'value' => 0],

                ['id' => 'tile-id', 'x' => 0, 'y' => 1, 'value' => 0],
                ['id' => 'tile-id', 'x' => 1, 'y' => 1, 'value' => 0],
                ['id' => 'tile-id', 'x' => 2, 'y' => 1, 'value' => 2],
                ['id' => 'tile-id', 'x' => 3, 'y' => 1, 'value' => 0],

                ['id' => 'tile-id', 'x' => 0, 'y' => 2, 'value' => 4],
                ['id' => 'tile-id', 'x' => 1, 'y' => 2, 'value' => 4],
                ['id' => 'tile-id', 'x' => 2, 'y' => 2, 'value' => 4],
                ['id' => 'tile-id', 'x' => 3, 'y' => 2, 'value' => 4],

                ['id' => 'tile-id', 'x' => 0, 'y' => 2, 'value' => 4],
                ['id' => 'tile-id', 'x' => 1, 'y' => 2, 'value' => 4],
                ['id' => 'tile-id', 'x' => 2, 'y' => 2, 'value' => 4],
                ['id' => 'tile-id', 'x' => 3, 'y' => 2, 'value' => 8],
            ]
        );

        $engine->steer(Engine::DIRECTION_NORTH);

        $this->assertEquals(
            [
                8, 8, 2, 4,
                0, 0, 8, 8,
                0, 0, 0, 0,
                0, 0, 0, 0,
            ],
            Arr::pluck($engine->export(), 'value')
        );
    }

    public function test_it_can_steer_south_array()
    {
        $engine = new Engine();

        $engine->import(
            [
                ['id' => 'tile-id', 'x' => 0, 'y' => 0, 'value' => 2],
                ['id' => 'tile-id', 'x' => 1, 'y' => 0, 'value' => 2],
                ['id' => 'tile-id', 'x' => 2, 'y' => 0, 'value' => 2],
                ['id' => 'tile-id', 'x' => 3, 'y' => 0, 'value' => 2],

                ['id' => 'tile-id', 'x' => 0, 'y' => 1, 'value' => 2],
                ['id' => 'tile-id', 'x' => 1, 'y' => 1, 'value' => 2],
                ['id' => 'tile-id', 'x' => 2, 'y' => 1, 'value' => 4],
                ['id' => 'tile-id', 'x' => 3, 'y' => 1, 'value' => 2],

                ['id' => 'tile-id', 'x' => 0, 'y' => 2, 'value' => 4],
                ['id' => 'tile-id', 'x' => 1, 'y' => 2, 'value' => 2],
                ['id' => 'tile-id', 'x' => 2, 'y' => 2, 'value' => 2],
                ['id' => 'tile-id', 'x' => 3, 'y' => 2, 'value' => 4],

                ['id' => 'tile-id', 'x' => 0, 'y' => 2, 'value' => 0],
                ['id' => 'tile-id', 'x' => 1, 'y' => 2, 'value' => 2],
                ['id' => 'tile-id', 'x' => 2, 'y' => 2, 'value' => 2],
                ['id' => 'tile-id', 'x' => 3, 'y' => 2, 'value' => 4],
            ]
        );

        $engine->steer(Engine::DIRECTION_SOUTH);

        $this->assertEquals(
            [
                0, 0, 0, 0,
                0, 0, 2, 0,
                4, 4, 4, 4,
                4, 4, 4, 8,
            ],
            Arr::pluck($engine->export(), 'value')
        );
    }

    public function test_it_can_steer_east()
    {
        $engine = new Engine();

        $engine->import(
            [
                ['id' => 'tile-id', 'x' => 0, 'y' => 0, 'value' => 8],
                ['id' => 'tile-id', 'x' => 1, 'y' => 0, 'value' => 8],
                ['id' => 'tile-id', 'x' => 2, 'y' => 0, 'value' => 2],
                ['id' => 'tile-id', 'x' => 3, 'y' => 0, 'value' => 4],

                ['id' => 'tile-id', 'x' => 0, 'y' => 1, 'value' => 0],
                ['id' => 'tile-id', 'x' => 1, 'y' => 1, 'value' => 0],
                ['id' => 'tile-id', 'x' => 2, 'y' => 1, 'value' => 8],
                ['id' => 'tile-id', 'x' => 3, 'y' => 1, 'value' => 8],

                ['id' => 'tile-id', 'x' => 0, 'y' => 2, 'value' => 0],
                ['id' => 'tile-id', 'x' => 1, 'y' => 2, 'value' => 0],
                ['id' => 'tile-id', 'x' => 2, 'y' => 2, 'value' => 0],
                ['id' => 'tile-id', 'x' => 3, 'y' => 2, 'value' => 0],

                ['id' => 'tile-id', 'x' => 0, 'y' => 2, 'value' => 0],
                ['id' => 'tile-id', 'x' => 1, 'y' => 2, 'value' => 0],
                ['id' => 'tile-id', 'x' => 2, 'y' => 2, 'value' => 0],
                ['id' => 'tile-id', 'x' => 3, 'y' => 2, 'value' => 0],
            ],
        );

        $engine->steer(Engine::DIRECTION_EAST);

        $this->assertEquals(
            [
                0, 16, 2, 4,
                0, 0, 0, 16,
                0, 0, 0, 0,
                0, 0, 0, 0,
            ],
            Arr::pluck($engine->export(), 'value')
        );
    }

    public function test_it_can_steer_west()
    {
        $engine = new Engine();

        $engine->import(
            [
                ['id' => 'tile-id', 'x' => 1, 'y' => 0, 'value' => 0],
                ['id' => 'tile-id', 'x' => 1, 'y' => 0, 'value' => 16],
                ['id' => 'tile-id', 'x' => 2, 'y' => 0, 'value' => 2],
                ['id' => 'tile-id', 'x' => 3, 'y' => 0, 'value' => 4],

                ['id' => 'tile-id', 'x' => 0, 'y' => 1, 'value' => 0],
                ['id' => 'tile-id', 'x' => 1, 'y' => 1, 'value' => 0],
                ['id' => 'tile-id', 'x' => 2, 'y' => 1, 'value' => 0],
                ['id' => 'tile-id', 'x' => 3, 'y' => 1, 'value' => 16],

                ['id' => 'tile-id', 'x' => 0, 'y' => 2, 'value' => 0],
                ['id' => 'tile-id', 'x' => 1, 'y' => 2, 'value' => 0],
                ['id' => 'tile-id', 'x' => 2, 'y' => 2, 'value' => 0],
                ['id' => 'tile-id', 'x' => 3, 'y' => 2, 'value' => 0],

                ['id' => 'tile-id', 'x' => 0, 'y' => 2, 'value' => 0],
                ['id' => 'tile-id', 'x' => 1, 'y' => 2, 'value' => 0],
                ['id' => 'tile-id', 'x' => 2, 'y' => 2, 'value' => 0],
                ['id' => 'tile-id', 'x' => 3, 'y' => 2, 'value' => 0],
            ],
        );

        $engine->steer(Engine::DIRECTION_WEST);

        $this->assertEquals(
            [
                16, 2, 4, 0,
                16, 0, 0, 0,
                0, 0, 0, 0,
                0, 0, 0, 0,
            ],
            Arr::pluck($engine->export(), 'value')
        );
    }
}
